// // Vamos a crear algunos comandos similares a los del S.O., que nos ayuden a entender mejor el funcionamiento de las clases DirectoryInfo, FileInfo y sus hom칩logas de utilidad. Para ello deberemos crear distintos programas, de forma que cada uno haga una de las siguientes funciones. El nombre de cada proyecto ser치 el nombre del comando y todos ir치n en una soluci칩n llamada ejercicio3:

// // Comando listaCarpeta: Se encargar치 de mostrar el contenido del directorio actual si no se le indica ruta, o del directorio que se indique en la ruta. Sino existe el directorio, se capturar치 la excepci칩n mostrando un mensaje de error.
// // Puedes usar la funcionalidad de las enumeraciones excluyentes para conocer el tipo de elemento:
// // Comando creaDirectorio: Se le pasa una ruta y te crea un directorio y tendr치s que controlar si se indica m치s de una entrada o capturar las excepciones de ruta inv치lida.

// // Comando eliminaDirectorio: Se le pasa una ruta y te elimina un directorio, tendr치s que controlar si se indica m치s de una entrada o capturar las excepciones de ruta inv치lida.

// // Comando eliminaFichero: Se le pasa una ruta y elimina un fichero y tendr치s que controlar si se indica m치s de una entrada o capturar las excepciones de ruta inv치lida.

// // Comando copiaFicheros: Se le pasa dos rutas:

// // La primera de un directorio v치lido.
// // la segunda de un directorio que no tiene porque existir.
// // El comando se encargar치 de copiar todos los ficheros que hay en la primera ruta a la segunda, creando la carpeta si fuera necesario. Adem치s, deber치s controlar las posibles excepciones.
// // Este comando podr치, adem치s, ejecutarse con la opci칩n de a침adir un filtro a la copia (solo se copiar치n los archivos que cumplan el filtro, eso lo podemos hacer con la sobrecarga del m칠todo EnumerateFile).
// // Ejemplo del comando para copiar los ficheros que contengan en su nombre windows, desde la carpeta logs a la carpeta copia:

// // copiaFicheros c:\logs c:\copia *windows*
// // 游늷 Nota: La ejecuci칩n y el paso de informaci칩n al programa se realizar치 a trav칠s de la l칤nea de comandos.
// // La explicaci칩n est치 en el primer ejercicio del tema anterior de excepciones.



// using System.ComponentModel.Design;
// using Microsoft.VisualBasic;

// public class Program
// {
//     static void Main(string[] args)
//     {
//         string opcion = args[0];
//         if (args.Length > 0)
//         {
           
//         switch (opcion)
//         {
//             case "1" :
//             listaCarpeta();
//             break;
//             case "2":
//             creaDirectorio();
//             break;
//             default:
//             Menu();
//             break;
            
//         }
//         }
//     }
// public static void Menu(){
//     Console.WriteLine("1.Para mostras la informacion de las capetas");
//     Console.WriteLine("2.Para crear un directorio con la ruta prporcionada");
//     Console.WriteLine("3....");
//     Console.WriteLine("4....");
//     Console.WriteLine("5....");
// }
// // Puedes usar la funcionalidad de las enumeraciones excluyentes para conocer el tipo de elemento:
// // Comando creaDirectorio: Se le pasa una ruta y te crea un directorio y tendr치s que controlar si se indica m치s de una entrada o capturar las excepciones de ruta inv치lida.
// public static void creaDirectorio(){

//     try
//     {    Console.WriteLine("Indique una ruta: ");
//          string ruta = Console.ReadLine();
//          Console.WriteLine("Creando la ruta en el siguiente directorio: ");
//          Directory.CreateDirectory(ruta);
//     }
//     catch (System.Exception)
//     {
        
//         Console.WriteLine("NOOO");
//     }
// }
//     public static void listaCarpeta()
//     {
//         try
//         {

//             Console.WriteLine("Indique una ruta para mostrar la informacion: ");
//             string ruta = Console.ReadLine();
//             if (string.IsNullOrWhiteSpace(ruta))
//             {
//                 ruta = Directory.GetCurrentDirectory();
//                 Console.WriteLine("La informacion del directorio actual es: ");
//                 Console.WriteLine(Path.GetDirectoryName(ruta));
//             }
//             DirectoryInfo infoDirectorio = new DirectoryInfo(ruta);
//             string[] informacionDirectorios = Directory.GetDirectories(ruta);
//             Console.WriteLine("La informacion de los directorios es: ");
//             foreach (string directorios in informacionDirectorios)
//             {
//                 Console.WriteLine(Path.GetDirectoryName(ruta));
//             }
//         }
//         catch (System.Exception)
//         {

//             Console.WriteLine("No");
//         }

//     }
//     public static void ObtenerInfromacionDirectorioActual(string ruta)
//     {
//         if (string.IsNullOrWhiteSpace(ruta))
//         {   
//             ruta = Directory.GetCurrentDirectory();
//            Console.WriteLine(Path.GetDirectoryName(ruta));
//         }
//     }
// }
// //     string [] informacionFicheros = Directory.GetFiles(ruta);
// //     Console.WriteLine("La informacion de los ficheros es:");
// //    foreach (string fichero in informacionFicheros)
// //    {
// //     Console.WriteLine(Path.GetFileName(fichero));

// //    }